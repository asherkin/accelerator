name: Build extension
on:
  workflow_call:
    inputs:
      os:
        type: string
        required: true
      cc:
        type: string
        required: true
      cxx:
        type: string
      upload:
        type: boolean
        required: false
        default: false
      upload-artifact-name:
        type: string
        required: false
        default: package
      debug:
        type: boolean
        required: false
        default: false
      cache-key:
        type: string
        required: true
      cache-dir:
        type: string
        required: true

jobs:
  build:
    name: Accelerator Extension ${{ inputs.os }}-${{ inputs.cc }}
    runs-on: ${{ inputs.os }}

    env:
      SOURCEMOD: ${{ github.workspace }}/${{ inputs.cache-dir }}/sourcemod
      PROJECT: 'accelerator'
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Retrieve the cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ inputs.cache-dir }}
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      
      - name: Linux dependencies
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-multilib g++-multilib libstdc++6 lib32stdc++6 \
            libc6-dev libc6-dev-i386 linux-libc-dev \
            linux-libc-dev:i386 lib32z1-dev \
            zlib1g-dev:i386 zlib1g-dev \
            tree \
            ${{ inputs.cc }}

      - name: Select clang compiler
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "CC=${{ inputs.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ inputs.cxx }}" >> $GITHUB_ENV
          ${{ inputs.cc }} --version
          ${{ inputs.cxx }} --version

      - uses: actions/setup-python@v5
        name: Setup Python 3.10
        with:
          python-version: '3.10'

      - name: Install AMBuild
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install ./${{ inputs.cache-dir }}/ambuild

      - name: Build (Debug)
        if: ${{ inputs.debug }}
        run: |
          mkdir -p build && cd build
          python ../configure.py --enable-debug
          ambuild

      - name: Build (Release)
        if: not ${{ inputs.debug }}
        run: |
          mkdir -p build && cd build
          python ../configure.py --enable-optimize
          ambuild
          ZIP_FILENAME="${{ env.PROJECT }}-${{ github.sha }}-${{ runner.os }}.zip"
          echo ${ZIP_FILENAME}
          echo "ZIP_FILENAME=${ZIP_FILENAME}" >> $GITHUB_ENV



      #- name: Upload package
      #  if: ${{ inputs.upload }}
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: ${{ inputs.upload-artifact-name }}
      #    path: build/package
  
      #- name: Package release - Windows
      #  if: startsWith(matrix.os, 'windows-')
      #  working-directory: extension/build/package
      #  run: |
      #    Compress-Archive -Path * -Destination ${{ env.ZIP_FILENAME }}
      #    Copy-Item -Path ${{ env.ZIP_FILENAME }} -Destination ${{ matrix.os }}_${{ matrix.cc }}_${{ env.ZIP_FILENAME }}

      - name: Package release - Linux
        if: startsWith(matrix.os, 'ubuntu-22.04')
        working-directory: build/package
        run: |
          zip -r "${{ env.ZIP_FILENAME }}" .
          cp "${{ env.ZIP_FILENAME }}" "${{ matrix.os }}_${{ matrix.cc }}_${{ env.ZIP_FILENAME }}"


      - name: Upload release
        # if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        shell: bash
        # working-directory: build/package
        run: |
          pwd
          ls -la
          ls -la ./build/package || true
          ls ./build/package/"${{ env.ZIP_FILENAME }}" || true
          tree -r || true
        #run: |
        #  echo "Begin upload..."
        #  AUTHORIZATION="$(echo -n '${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}' | base64)"
        #  echo "::add-mask::${AUTHORIZATION}"
        #
        #  HTTP_CODE=$(curl -XPOST -H "Authorization: Basic ${AUTHORIZATION}" -H "Content-Type: application/zip" --output /dev/null --silent --write-out "%{http_code}" --data-binary "@${{ env.ZIP_FILENAME }}" "https://builds.limetech.io/upload.php?project=${{ env.PROJECT }}&filename=${{ env.ZIP_FILENAME }}")
        #  if test ${HTTP_CODE} -ne 200; then
        #    exit ${HTTP_CODE}
        #  fi
        #  echo "Upload successful!"

      #- name: Upload a Build Artifact
      #  uses: actions/upload-artifact@v4
      #  with:
          # Artifact name
      #    name: ${{ matrix.os }}_${{ matrix.cc }}_${{ env.ZIP_FILENAME }}
          # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
      #    path: ${{ github.workspace }}/extension/build/package/${{ matrix.os }}_${{ matrix.cc }}_${{ env.ZIP_FILENAME }}
          # The desired behavior if no files are found using the provided path.
      #    if-no-files-found: error
          # Duration after which artifact will expire in days. 0 means using default retention.
      #    retention-days: 14
